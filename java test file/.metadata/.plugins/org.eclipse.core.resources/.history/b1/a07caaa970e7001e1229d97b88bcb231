package com.smartdatasolutions.test.impl;

import com.smartdatasolutions.test.Member;
import com.smartdatasolutions.test.MemberExporter;
import com.smartdatasolutions.test.MemberFileConverter;
import com.smartdatasolutions.test.MemberImporter;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main extends MemberFileConverter {

    @Override
    protected MemberExporter getMemberExporter() {
        return new MemberExporterImpl();
    }

    @Override
    protected MemberImporter getMemberImporter() {
        return new MemberImporterImpl();
    }

    @Override
    protected List<Member> getNonDuplicateMembers(List<Member> membersFromFile) {
        // Implement logic to remove duplicate members
        List<Member> nonDuplicateMembers = new ArrayList<>();
        for (Member member : membersFromFile) {
            if (!nonDuplicateMembers.contains(member)) {
                nonDuplicateMembers.add(member);
            }
        }
        return nonDuplicateMembers;
    }

    @Override
    protected Map<String, List<Member>> splitMembersByState(List<Member> validMembers) {
        // Implement logic to split members by state
        Map<String, List<Member>> membersByState = new HashMap<>();
        for (Member member : validMembers) {
            String state = member.getState();
            if (!membersByState.containsKey(state)) {
                membersByState.put(state, new ArrayList<>());
            }
            membersByState.get(state).add(member);
        }
        return membersByState;
    }

    public static void main(String[] args) {
        Main main = new Main();
        File inputMemberFile = new File("Members.txt");
        String outputFilePath = "output";
        String outputFileName = "output.csv";
        try {
            List<Member> members = main.getNonDuplicateMembers(main.getMemberImporter().importMembers(inputMemberFile));
            System.out.println(members);
            Map<String, List<Member>> membersByState = main.splitMembersByState(members);
            for (Map.Entry<String, List<Member>> entry : membersByState.entrySet()) {
                String state = entry.getKey();
                List<Member> stateMembers = entry.getValue();
                String stateFileName = state + "_" + outputFileName;
                String filePath = outputFilePath + File.separator + stateFileName;
                main.writeCsvFile(filePath, stateMembers);
                System.out.println("CSV file for state " + state + " created at " + filePath);
            }
        } catch (Exception e) {
            System.err.println("Error converting file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void writeCsvFile(String filePath, List<Member> members) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            // Write CSV header
            writer.write("id,firstName,lastName,address,city,state,zip");
            writer.newLine();

            // Write CSV content
            for (Member member : members) {
                writer.write(member.getId() + "," +
                             member.getFirstName() + "," +
                             member.getLastName() + "," +
                             member.getAddress() + "," +
                             member.getCity() + "," +
                             member.getState() + "," +
                             member.getZip());
                writer.newLine();
            }
        }
    }

}
