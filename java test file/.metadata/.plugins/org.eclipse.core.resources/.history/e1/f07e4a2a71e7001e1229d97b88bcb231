package com.smartdatasolutions.test.impl;

import com.smartdatasolutions.test.Member;
import com.smartdatasolutions.test.MemberExporter;
import com.smartdatasolutions.test.MemberFileConverter;
import com.smartdatasolutions.test.MemberImporter;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main extends MemberFileConverter {

    @Override
    protected MemberExporter getMemberExporter() {
        return new MemberExporterImpl();
    }

    @Override
    protected MemberImporter getMemberImporter() {
        return new MemberImporterImpl();
    }

    @Override
    protected List<Member> getNonDuplicateMembers(List<Member> membersFromFile) {
        // Implement logic to remove duplicate members
        List<Member> nonDuplicateMembers = new ArrayList<>();
        for (Member member : membersFromFile) {
            if (!nonDuplicateMembers.contains(member)) {
                nonDuplicateMembers.add(member);
            }
        }
        return nonDuplicateMembers;
    }

    @Override
    protected Map<String, List<Member>> splitMembersByState(List<Member> validMembers) {
        // Implement logic to split members by state
        Map<String, List<Member>> membersByState = new HashMap<>();
        for (Member member : validMembers) {
            String state = member.getState();
            if (!membersByState.containsKey(state)) {
                membersByState.put(state, new ArrayList<>());
            }
            membersByState.get(state).add(member);
        }
        return membersByState;
    }

    @Override
	public void convert(File inputMemberFile, String outputFilePath, String outputFileName) throws Exception {
        // Read members from input file
        MemberImporter memberImporter = getMemberImporter();
        List<Member> membersFromFile = memberImporter.importMembers(inputMemberFile);
        
        System.out.println(membersFromFile);

        // Filter out duplicate members
        List<Member> validMembers = getNonDuplicateMembers(membersFromFile);

        // Split members by state
        Map<String, List<Member>> membersByState = splitMembersByState(validMembers);

        // Create CSV files for each state
        for (Map.Entry<String, List<Member>> entry : membersByState.entrySet()) {
            String state = entry.getKey();
            List<Member> membersPerState = entry.getValue();

            File outputFile = new File(outputFilePath + File.separator + state + "_" + outputFileName);

            try (FileWriter fileWriter = new FileWriter(outputFile);
                 BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)) {

                // Write CSV header
                bufferedWriter.write("id,first name,last name,address,city,state,zip");
                bufferedWriter.newLine();

                // Write members to CSV
                for (Member member : membersPerState) {
                    bufferedWriter.write(member.toCSVString());
                    bufferedWriter.newLine();
                }
            }
        }
    }
    
    

    public static void main(String[] args) {
        Main main = new Main();
        File inputMemberFile = new File("Members.txt");
        String outputFilePath = System.getProperty("user.dir");
        String outputFileName = "output.csv";
        try {
            main.convert(inputMemberFile, outputFilePath, outputFileName);
            System.out.println("Converted");
        } catch (Exception e) {
            System.err.println("Error converting file: " + e.getMessage());
            e.printStackTrace();
        }
    }

}
